// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: dcrrates.proto

package dcrrates

import (
	"context"
	reflect "reflect"
	sync "sync"

	"google.golang.org/grpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExchangeSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BtcIndex     string   `protobuf:"bytes,1,opt,name=btcIndex,proto3" json:"btcIndex,omitempty"`
	Exchanges    []string `protobuf:"bytes,2,rep,name=exchanges,proto3" json:"exchanges,omitempty"`
	LtcExchanges []string `protobuf:"bytes,3,rep,name=ltcExchanges,proto3" json:"ltcExchanges,omitempty"`
	BtcExchanges []string `protobuf:"bytes,4,rep,name=btcExchanges,proto3" json:"btcExchanges,omitempty"`
}

func (x *ExchangeSubscription) Reset() {
	*x = ExchangeSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcrrates_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeSubscription) ProtoMessage() {}

func (x *ExchangeSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_dcrrates_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeSubscription.ProtoReflect.Descriptor instead.
func (*ExchangeSubscription) Descriptor() ([]byte, []int) {
	return file_dcrrates_proto_rawDescGZIP(), []int{0}
}

func (x *ExchangeSubscription) GetBtcIndex() string {
	if x != nil {
		return x.BtcIndex
	}
	return ""
}

func (x *ExchangeSubscription) GetExchanges() []string {
	if x != nil {
		return x.Exchanges
	}
	return nil
}

func (x *ExchangeSubscription) GetLtcExchanges() []string {
	if x != nil {
		return x.LtcExchanges
	}
	return nil
}

func (x *ExchangeSubscription) GetBtcExchanges() []string {
	if x != nil {
		return x.BtcExchanges
	}
	return nil
}

type ExchangeRateUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token        string                             `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Symbol       string                             `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Price        float64                            `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	BaseVolume   float64                            `protobuf:"fixed64,4,opt,name=baseVolume,proto3" json:"baseVolume,omitempty"`
	Volume       float64                            `protobuf:"fixed64,5,opt,name=volume,proto3" json:"volume,omitempty"`
	Change       float64                            `protobuf:"fixed64,6,opt,name=change,proto3" json:"change,omitempty"`
	Stamp        int64                              `protobuf:"varint,7,opt,name=stamp,proto3" json:"stamp,omitempty"`
	Indices      map[string]float64                 `protobuf:"bytes,8,rep,name=indices,proto3" json:"indices,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Depth        *ExchangeRateUpdate_DepthData      `protobuf:"bytes,9,opt,name=depth,proto3" json:"depth,omitempty"`
	Candlesticks []*ExchangeRateUpdate_Candlesticks `protobuf:"bytes,10,rep,name=candlesticks,proto3" json:"candlesticks,omitempty"`
}

func (x *ExchangeRateUpdate) Reset() {
	*x = ExchangeRateUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcrrates_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRateUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRateUpdate) ProtoMessage() {}

func (x *ExchangeRateUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dcrrates_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRateUpdate.ProtoReflect.Descriptor instead.
func (*ExchangeRateUpdate) Descriptor() ([]byte, []int) {
	return file_dcrrates_proto_rawDescGZIP(), []int{1}
}

func (x *ExchangeRateUpdate) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ExchangeRateUpdate) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ExchangeRateUpdate) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ExchangeRateUpdate) GetBaseVolume() float64 {
	if x != nil {
		return x.BaseVolume
	}
	return 0
}

func (x *ExchangeRateUpdate) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *ExchangeRateUpdate) GetChange() float64 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *ExchangeRateUpdate) GetStamp() int64 {
	if x != nil {
		return x.Stamp
	}
	return 0
}

func (x *ExchangeRateUpdate) GetIndices() map[string]float64 {
	if x != nil {
		return x.Indices
	}
	return nil
}

func (x *ExchangeRateUpdate) GetDepth() *ExchangeRateUpdate_DepthData {
	if x != nil {
		return x.Depth
	}
	return nil
}

func (x *ExchangeRateUpdate) GetCandlesticks() []*ExchangeRateUpdate_Candlesticks {
	if x != nil {
		return x.Candlesticks
	}
	return nil
}

type ExchangeRateUpdate_DepthPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantity float64 `protobuf:"fixed64,1,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Price    float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *ExchangeRateUpdate_DepthPoint) Reset() {
	*x = ExchangeRateUpdate_DepthPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcrrates_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRateUpdate_DepthPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRateUpdate_DepthPoint) ProtoMessage() {}

func (x *ExchangeRateUpdate_DepthPoint) ProtoReflect() protoreflect.Message {
	mi := &file_dcrrates_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRateUpdate_DepthPoint.ProtoReflect.Descriptor instead.
func (*ExchangeRateUpdate_DepthPoint) Descriptor() ([]byte, []int) {
	return file_dcrrates_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ExchangeRateUpdate_DepthPoint) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ExchangeRateUpdate_DepthPoint) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type ExchangeRateUpdate_DepthData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time int64                            `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Bids []*ExchangeRateUpdate_DepthPoint `protobuf:"bytes,2,rep,name=bids,proto3" json:"bids,omitempty"`
	Asks []*ExchangeRateUpdate_DepthPoint `protobuf:"bytes,3,rep,name=asks,proto3" json:"asks,omitempty"`
}

func (x *ExchangeRateUpdate_DepthData) Reset() {
	*x = ExchangeRateUpdate_DepthData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcrrates_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRateUpdate_DepthData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRateUpdate_DepthData) ProtoMessage() {}

func (x *ExchangeRateUpdate_DepthData) ProtoReflect() protoreflect.Message {
	mi := &file_dcrrates_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRateUpdate_DepthData.ProtoReflect.Descriptor instead.
func (*ExchangeRateUpdate_DepthData) Descriptor() ([]byte, []int) {
	return file_dcrrates_proto_rawDescGZIP(), []int{1, 2}
}

func (x *ExchangeRateUpdate_DepthData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ExchangeRateUpdate_DepthData) GetBids() []*ExchangeRateUpdate_DepthPoint {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *ExchangeRateUpdate_DepthData) GetAsks() []*ExchangeRateUpdate_DepthPoint {
	if x != nil {
		return x.Asks
	}
	return nil
}

type ExchangeRateUpdate_Candlestick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	High   float64 `protobuf:"fixed64,1,opt,name=high,proto3" json:"high,omitempty"`
	Low    float64 `protobuf:"fixed64,2,opt,name=low,proto3" json:"low,omitempty"`
	Open   float64 `protobuf:"fixed64,3,opt,name=open,proto3" json:"open,omitempty"`
	Close  float64 `protobuf:"fixed64,4,opt,name=close,proto3" json:"close,omitempty"`
	Volume float64 `protobuf:"fixed64,5,opt,name=volume,proto3" json:"volume,omitempty"`
	Start  int64   `protobuf:"varint,6,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *ExchangeRateUpdate_Candlestick) Reset() {
	*x = ExchangeRateUpdate_Candlestick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcrrates_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRateUpdate_Candlestick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRateUpdate_Candlestick) ProtoMessage() {}

func (x *ExchangeRateUpdate_Candlestick) ProtoReflect() protoreflect.Message {
	mi := &file_dcrrates_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRateUpdate_Candlestick.ProtoReflect.Descriptor instead.
func (*ExchangeRateUpdate_Candlestick) Descriptor() ([]byte, []int) {
	return file_dcrrates_proto_rawDescGZIP(), []int{1, 3}
}

func (x *ExchangeRateUpdate_Candlestick) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *ExchangeRateUpdate_Candlestick) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *ExchangeRateUpdate_Candlestick) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *ExchangeRateUpdate_Candlestick) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *ExchangeRateUpdate_Candlestick) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *ExchangeRateUpdate_Candlestick) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

type ExchangeRateUpdate_Candlesticks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bin    string                            `protobuf:"bytes,1,opt,name=bin,proto3" json:"bin,omitempty"`
	Sticks []*ExchangeRateUpdate_Candlestick `protobuf:"bytes,2,rep,name=sticks,proto3" json:"sticks,omitempty"`
}

func (x *ExchangeRateUpdate_Candlesticks) Reset() {
	*x = ExchangeRateUpdate_Candlesticks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcrrates_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeRateUpdate_Candlesticks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeRateUpdate_Candlesticks) ProtoMessage() {}

func (x *ExchangeRateUpdate_Candlesticks) ProtoReflect() protoreflect.Message {
	mi := &file_dcrrates_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeRateUpdate_Candlesticks.ProtoReflect.Descriptor instead.
func (*ExchangeRateUpdate_Candlesticks) Descriptor() ([]byte, []int) {
	return file_dcrrates_proto_rawDescGZIP(), []int{1, 4}
}

func (x *ExchangeRateUpdate_Candlesticks) GetBin() string {
	if x != nil {
		return x.Bin
	}
	return ""
}

func (x *ExchangeRateUpdate_Candlesticks) GetSticks() []*ExchangeRateUpdate_Candlestick {
	if x != nil {
		return x.Sticks
	}
	return nil
}

var File_dcrrates_proto protoreflect.FileDescriptor

var file_dcrrates_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x64, 0x63, 0x72, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x64, 0x63, 0x72, 0x72, 0x61, 0x74, 0x65, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x14, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x74, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x74, 0x63, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x6c, 0x74, 0x63, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x74, 0x63, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x74, 0x63, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x74, 0x63, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x9a, 0x07, 0x0a, 0x12, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x63, 0x72, 0x72, 0x61, 0x74,
	0x65, 0x73, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x63, 0x72,
	0x72, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x4d, 0x0a, 0x0c, 0x63, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x64, 0x63, 0x72, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x74, 0x68, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x1a, 0x99, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x70, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x63, 0x72, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x62,
	0x69, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x64, 0x63, 0x72, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x61, 0x73, 0x6b, 0x73,
	0x1a, 0x8b, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x1a, 0x62,
	0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x62, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x6e,
	0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x64, 0x63, 0x72, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x52, 0x06, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x73, 0x32, 0x60, 0x0a, 0x08, 0x44, 0x43, 0x52, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x54,
	0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x64, 0x63, 0x72, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1c, 0x2e, 0x64, 0x63, 0x72, 0x72, 0x61, 0x74, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x30, 0x01, 0x42, 0x0b, 0x5a, 0x09, 0x2f, 0x64, 0x63, 0x72, 0x72, 0x61, 0x74, 0x65,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dcrrates_proto_rawDescOnce sync.Once
	file_dcrrates_proto_rawDescData = file_dcrrates_proto_rawDesc
)

func file_dcrrates_proto_rawDescGZIP() []byte {
	file_dcrrates_proto_rawDescOnce.Do(func() {
		file_dcrrates_proto_rawDescData = protoimpl.X.CompressGZIP(file_dcrrates_proto_rawDescData)
	})
	return file_dcrrates_proto_rawDescData
}

var file_dcrrates_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_dcrrates_proto_goTypes = []interface{}{
	(*ExchangeSubscription)(nil),            // 0: dcrrates.ExchangeSubscription
	(*ExchangeRateUpdate)(nil),              // 1: dcrrates.ExchangeRateUpdate
	nil,                                     // 2: dcrrates.ExchangeRateUpdate.IndicesEntry
	(*ExchangeRateUpdate_DepthPoint)(nil),   // 3: dcrrates.ExchangeRateUpdate.DepthPoint
	(*ExchangeRateUpdate_DepthData)(nil),    // 4: dcrrates.ExchangeRateUpdate.DepthData
	(*ExchangeRateUpdate_Candlestick)(nil),  // 5: dcrrates.ExchangeRateUpdate.Candlestick
	(*ExchangeRateUpdate_Candlesticks)(nil), // 6: dcrrates.ExchangeRateUpdate.Candlesticks
}
var file_dcrrates_proto_depIdxs = []int32{
	2, // 0: dcrrates.ExchangeRateUpdate.indices:type_name -> dcrrates.ExchangeRateUpdate.IndicesEntry
	4, // 1: dcrrates.ExchangeRateUpdate.depth:type_name -> dcrrates.ExchangeRateUpdate.DepthData
	6, // 2: dcrrates.ExchangeRateUpdate.candlesticks:type_name -> dcrrates.ExchangeRateUpdate.Candlesticks
	3, // 3: dcrrates.ExchangeRateUpdate.DepthData.bids:type_name -> dcrrates.ExchangeRateUpdate.DepthPoint
	3, // 4: dcrrates.ExchangeRateUpdate.DepthData.asks:type_name -> dcrrates.ExchangeRateUpdate.DepthPoint
	5, // 5: dcrrates.ExchangeRateUpdate.Candlesticks.sticks:type_name -> dcrrates.ExchangeRateUpdate.Candlestick
	0, // 6: dcrrates.DCRRates.SubscribeExchanges:input_type -> dcrrates.ExchangeSubscription
	1, // 7: dcrrates.DCRRates.SubscribeExchanges:output_type -> dcrrates.ExchangeRateUpdate
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_dcrrates_proto_init() }
func file_dcrrates_proto_init() {
	if File_dcrrates_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dcrrates_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcrrates_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRateUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcrrates_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRateUpdate_DepthPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcrrates_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRateUpdate_DepthData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcrrates_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRateUpdate_Candlestick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcrrates_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeRateUpdate_Candlesticks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dcrrates_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dcrrates_proto_goTypes,
		DependencyIndexes: file_dcrrates_proto_depIdxs,
		MessageInfos:      file_dcrrates_proto_msgTypes,
	}.Build()
	File_dcrrates_proto = out.File
	file_dcrrates_proto_rawDesc = nil
	file_dcrrates_proto_goTypes = nil
	file_dcrrates_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DCRRatesClient is the client API for DCRRates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DCRRatesClient interface {
	SubscribeExchanges(ctx context.Context, in *ExchangeSubscription, opts ...grpc.CallOption) (DCRRates_SubscribeExchangesClient, error)
}

type dCRRatesClient struct {
	cc *grpc.ClientConn
}

func NewDCRRatesClient(cc *grpc.ClientConn) DCRRatesClient {
	return &dCRRatesClient{cc}
}

func (c *dCRRatesClient) SubscribeExchanges(ctx context.Context, in *ExchangeSubscription, opts ...grpc.CallOption) (DCRRates_SubscribeExchangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DCRRates_serviceDesc.Streams[0], "/dcrrates.DCRRates/SubscribeExchanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &dCRRatesSubscribeExchangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DCRRates_SubscribeExchangesClient interface {
	Recv() (*ExchangeRateUpdate, error)
	grpc.ClientStream
}

type dCRRatesSubscribeExchangesClient struct {
	grpc.ClientStream
}

func (x *dCRRatesSubscribeExchangesClient) Recv() (*ExchangeRateUpdate, error) {
	m := new(ExchangeRateUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DCRRatesServer is the server API for DCRRates service.
type DCRRatesServer interface {
	SubscribeExchanges(*ExchangeSubscription, DCRRates_SubscribeExchangesServer) error
}

func RegisterDCRRatesServer(s *grpc.Server, srv DCRRatesServer) {
	s.RegisterService(&_DCRRates_serviceDesc, srv)
}

func _DCRRates_SubscribeExchanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExchangeSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DCRRatesServer).SubscribeExchanges(m, &dCRRatesSubscribeExchangesServer{stream})
}

type DCRRates_SubscribeExchangesServer interface {
	Send(*ExchangeRateUpdate) error
	grpc.ServerStream
}

type dCRRatesSubscribeExchangesServer struct {
	grpc.ServerStream
}

func (x *dCRRatesSubscribeExchangesServer) Send(m *ExchangeRateUpdate) error {
	return x.ServerStream.SendMsg(m)
}

var _DCRRates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dcrrates.DCRRates",
	HandlerType: (*DCRRatesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeExchanges",
			Handler:       _DCRRates_SubscribeExchanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dcrrates.proto",
}
